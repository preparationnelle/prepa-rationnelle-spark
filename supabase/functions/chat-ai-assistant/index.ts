
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { messages } = await req.json();

    // Get OpenAI API key from environment
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      console.error("Missing OPENAI_API_KEY, please define it in Supabase secrets.");
      return new Response(
        JSON.stringify({ error: "Le serveur n'est pas configuré. Merci d'ajouter la clé OPENAI_API_KEY dans les secrets Supabase." }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // System prompt optimized for prepa coaching
    const systemPrompt = `Tu es Majora, un assistant IA bienveillant spécialisé dans l'accompagnement des étudiants en classe préparatoire. 

Ton rôle est d'aider avec :
- La gestion du stress et de l'anxiété liés aux concours
- L'organisation des révisions et la méthode de travail
- La motivation et le bien-être mental
- Les conseils pratiques pour optimiser les performances

Tes réponses doivent être :
- Courtes et directes (2-3 phrases maximum)
- Empathiques et bienveillantes
- Pratiques et actionnables
- Inspirantes quand c'est pertinent

N'invente jamais de données. Si tu ne sais pas quelque chose, dis-le honnêtement et redirige vers des ressources appropriées.

Adopte un ton professionnel mais chaleureux, comme un coach expérimenté qui comprend les défis de la prépa.`;

    const apiMessages = [
      { role: "system", content: systemPrompt },
      ...messages
    ];

    console.log("[AI] Appel OpenAI API pour le chatbot prépa...");

    // Call OpenAI API with the newer gpt-4o-mini model
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: apiMessages,
        temperature: 0.7,
        max_tokens: 300,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: { message: 'Unknown error' } }));
      console.error("OpenAI API error:", errorData);
      
      return new Response(
        JSON.stringify({ 
          error: `Erreur OpenAI: ${errorData.error?.message || 'Erreur de connexion à l\'API'}` 
        }),
        { 
          status: response.status, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    const data = await response.json();
    const text = data.choices?.[0]?.message?.content;

    if (!text) {
      console.error("No text generated by OpenAI:", data);
      return new Response(
        JSON.stringify({ error: "Aucune réponse générée par l'IA" }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    console.log(`[AI] Réponse générée avec succès`);

    return new Response(
      JSON.stringify({ text }),
      { 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json',
        } 
      }
    );
  } catch (error) {
    console.error('Error in AI assistant function:', error);

    return new Response(
      JSON.stringify({ 
        error: `Erreur serveur: ${error.message || 'Erreur inconnue'}` 
      }),
      { 
        status: 500, 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json',
        } 
      }
    );
  }
});
