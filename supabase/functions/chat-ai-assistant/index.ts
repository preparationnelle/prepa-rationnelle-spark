
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { messages, context } = await req.json();

    // Get OpenAI API key from environment
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      console.error("Missing OPENAI_API_KEY, please define it in Supabase secrets.");
      return new Response(
        JSON.stringify({ error: "Le serveur n'est pas configuré. Merci d'ajouter la clé OPENAI_API_KEY dans les secrets Supabase." }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const apiMessages = [
      { role: "system", content: context || `Tu es un expert des oraux des écoles de commerce. Tes réponses doivent être courtes (2 à 3 phrases maximum), claires, et actionnables.
Quand une question concerne une école précise (ex : ESSEC, HEC, ESCP…), redirige l'utilisateur vers la page dédiée de l'école si elle existe sur le site.
Si la réponse nécessite plus de précision, termine ta réponse par :
"Pour plus de détails, tu peux aussi nous poser ta question directement sur WhatsApp." 
N'invente jamais, si tu ne sais pas, redirige sur WhatsApp.
Ne mets jamais de texte en gras, pas de paragraphes trop longs, et adopte un ton simple, professionnel et bienveillant.
Tu es là pour aider les étudiants à comprendre comment réussir leur oral et leur donner une réponse rapide.` },
      ...messages
    ];

    // Log début appel OpenAI
    console.log("[AI] Appel OpenAI API pour le chatbot prépa...");

    // Call OpenAI API with the newer gpt-4o model
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: apiMessages,
        temperature: 0.7,
        max_tokens: 500,
      }),
    });

    if (!response.ok) {
      const error = await response.json();
      console.error("OpenAI API error:", error.error?.message || error);
      throw new Error(`OpenAI API error: ${error.error?.message || 'Unknown error'}`);
    }

    const data = await response.json();
    const text = data.choices && data.choices[0]?.message?.content 
      ? data.choices[0].message.content 
      : null;

    if (!text) {
      throw new Error("No text generated by OpenAI");
    }

    console.log(`[AI] Réponse générée : ${text}`);

    return new Response(
      JSON.stringify({ text }),
      { 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json',
          'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0',
        } 
      }
    );
  } catch (error) {
    console.error('Error in AI assistant function:', error);

    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500, 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json',
          'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0',
        } 
      }
    );
  }
});
